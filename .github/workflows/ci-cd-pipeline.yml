name: CI/CD Pipeline

# 1. KÍCH HOẠT (TRIGGER)
# Workflow này sẽ tự động chạy khi nào?
on:
  push:
    branches: [ "main" ] # -> Khi có code được push lên nhánh "main"

# Biến môi trường dùng chung cho tiện
env:
  REGISTRY: ghcr.io # Dùng kho chứa image của GitHub
  # github.repository sẽ tự lấy tên repo dạng "username/ten-repo"
  # Ví dụ: dem-user/my-simple-app
  IMAGE_NAME: ${{ toLowerCase(github.repository) }} 

# NƠI ĐỊNH NGHĨA CÁC CÔNG VIỆC (JOBS)
jobs:
  # 2. JOB 1: BUILD VÀ PUSH IMAGE (Phần CI)
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # Chạy trên một máy ảo Ubuntu
    
    # Cấp quyền đặc biệt cho Job này
    permissions:
      contents: read     # Quyền đọc code (để checkout)
      packages: write    # Quyền ghi (push) image lên GHCR

    # Định nghĩa "đầu ra" (output) của job này
    # Để job sau (update-manifest) có thể lấy dùng
    outputs:
      # Chúng ta sẽ tạo một output tên là 'image_tag'
      image_tag: ${{ steps.meta.outputs.version }}

    steps: # Các bước thực thi của Job 1
      # Bước 1: Lấy code từ repo 'my-simple-app' về máy ảo
      - name: Checkout code (Repo App)
        uses: actions/checkout@v4

      # Bước 2: Đăng nhập vào kho chứa image (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Tên user GitHub của bạn
          # GITHUB_TOKEN là token tự động, chỉ có quyền push image
          # Nó khác hoàn toàn với GIT_PAT của chúng ta
          password: ${{ secrets.GITHUB_TOKEN }} 

      # Bước 3: (Thông minh) Tự động tạo tên tag cho image
      - name: Extract metadata (tags) for Docker
        id: meta # Đặt ID cho bước này để gọi ở dưới
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Chúng ta dùng 7 ký tự đầu của mã SHA commit làm tag
            # Ví dụ: a1b2c3d
            type=sha,prefix=,format=short

      # Bước 4: Build (từ Dockerfile) và Push image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Lấy Dockerfile ở thư mục gốc
          push: true # Có, hãy push image
          # Lấy tag đã tạo ở bước 'meta' (ví dụ: a1b2c3d)
          tags: ${{ steps.meta.outputs.tags }} 
          labels: ${{ steps.meta.outputs.labels }}

  # 3. JOB 2: CẬP NHẬT FILE MANIFEST (Trigger cho CD)
  update-manifest:
    name: Update Kubernetes Manifest
    runs-on: ubuntu-latest
    
    # CHÚ Ý: Job này phải CHỜ job 'build-and-push' chạy xong
    needs: build-and-push

    steps: # Các bước thực thi của Job 2
      # Bước 1: Lấy code từ repo 'my-app-manifests'
      - name: Checkout code (Repo Manifest)
        uses: actions/checkout@v4
        with:
          # Chỉ định rõ là checkout repo NÀO
          repository: Verzol/my-app-manifests
          # DÙNG CHÌA KHÓA: Đây là lúc dùng 'két sắt'
          # Token này sẽ cho phép bước 'git push' ở dưới
          token: ${{ secrets.GIT_PAT }} 

      # Bước 2: Lấy tên tag (output) từ Job 1
      - name: Get new image tag
        run: |
          # Lấy output 'image_tag' từ job 'needs' (build-and-push)
          # Và gán nó vào một biến môi trường tên là NEW_TAG
          echo "NEW_TAG=${{ needs.build-and-push.outputs.image_tag }}" >> $GITHUB_ENV

      # Bước 3: "MA THUẬT" - Tìm và thay thế
      - name: Update image tag in deployment.yaml
        run: |
          # sed: Là một công cụ tìm và thay thế text
          # -i: Sửa trực tiếp file 'deployment.yaml'
          # s|image: .*|...|g:
          #   s: Bắt đầu lệnh thay thế
          #   |: Ký tự phân cách (thay vì dùng /)
          #   image: .*: Tìm dòng nào bắt đầu bằng 'image: ' và theo sau là BẤT CỨ KÝ TỰ GÌ (.*)
          #   |: Phân cách
          #   image: ...:${{ env.NEW_TAG }}: Thay thế toàn bộ dòng đó bằng chuỗi này
          #   |: Phân cách
          #   g: Thay thế trên toàn bộ file
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEW_TAG }}|g" deployment.yaml
          
          # In ra để kiểm tra xem đã sửa đúng chưa
          echo "--- Nội dung deployment.yaml MỚI ---"
          cat deployment.yaml
          echo "-----------------------------------"

      # Bước 4: Commit và Push file 'deployment.yaml' đã sửa
      - name: Commit and push changes
        run: |
          # Cấu hình Git để nó biết "ai" đang commit
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "bot@github.com"
          
          # Add file đã sửa
          git add deployment.yaml
          
          # Tạo commit
          # '|| echo ...' là để tránh báo lỗi nếu không có gì thay đổi
          git commit -m "Update image to ${{ env.NEW_TAB }}" || echo "No changes to commit"
          
          # Đẩy commit mới này về repo 'my-app-manifests'
          git push
